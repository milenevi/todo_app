// Mocks generated by Mockito 5.4.5 from annotations
// in todo_app/test/unit/todo_detail_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i9;

import 'package:flutter/foundation.dart' as _i4;
import 'package:flutter/src/widgets/framework.dart' as _i3;
import 'package:flutter/src/widgets/notification_listener.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_app/domain/models/todo.dart' as _i2;
import 'package:todo_app/domain/usecases/todo_usecases.dart' as _i5;
import 'package:todo_app/providers/todo_provider.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTodo_0 extends _i1.SmartFake implements _i2.Todo {
  _FakeTodo_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWidget_1 extends _i1.SmartFake implements _i3.Widget {
  _FakeWidget_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_2 extends _i1.SmartFake
    implements _i3.InheritedWidget {
  _FakeInheritedWidget_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_3 extends _i1.SmartFake
    implements _i4.DiagnosticsNode {
  _FakeDiagnosticsNode_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({
    _i4.TextTreeConfiguration? parentConfiguration,
    _i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info,
  }) => super.toString();
}

/// A class which mocks [TodoUseCases].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoUseCases extends _i1.Mock implements _i5.TodoUseCases {
  MockTodoUseCases() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i2.Todo>> getTodos() =>
      (super.noSuchMethod(
            Invocation.method(#getTodos, []),
            returnValue: _i6.Future<List<_i2.Todo>>.value(<_i2.Todo>[]),
          )
          as _i6.Future<List<_i2.Todo>>);

  @override
  _i6.Future<_i2.Todo> getTodoById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getTodoById, [id]),
            returnValue: _i6.Future<_i2.Todo>.value(
              _FakeTodo_0(this, Invocation.method(#getTodoById, [id])),
            ),
          )
          as _i6.Future<_i2.Todo>);

  @override
  _i6.Future<void> toggleTodoCompletion(_i2.Todo? todo) =>
      (super.noSuchMethod(
            Invocation.method(#toggleTodoCompletion, [todo]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<_i2.Todo> addTodo(String? title) =>
      (super.noSuchMethod(
            Invocation.method(#addTodo, [title]),
            returnValue: _i6.Future<_i2.Todo>.value(
              _FakeTodo_0(this, Invocation.method(#addTodo, [title])),
            ),
          )
          as _i6.Future<_i2.Todo>);

  @override
  _i6.Future<void> deleteTodo(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTodo, [id]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> updateTodo(_i2.Todo? todo) =>
      (super.noSuchMethod(
            Invocation.method(#updateTodo, [todo]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i3.BuildContext {
  MockBuildContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Widget get widget =>
      (super.noSuchMethod(
            Invocation.getter(#widget),
            returnValue: _FakeWidget_1(this, Invocation.getter(#widget)),
          )
          as _i3.Widget);

  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);

  @override
  bool get debugDoingBuild =>
      (super.noSuchMethod(
            Invocation.getter(#debugDoingBuild),
            returnValue: false,
          )
          as bool);

  @override
  _i3.InheritedWidget dependOnInheritedElement(
    _i3.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #dependOnInheritedElement,
              [ancestor],
              {#aspect: aspect},
            ),
            returnValue: _FakeInheritedWidget_2(
              this,
              Invocation.method(
                #dependOnInheritedElement,
                [ancestor],
                {#aspect: aspect},
              ),
            ),
          )
          as _i3.InheritedWidget);

  @override
  void visitAncestorElements(_i3.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(#visitAncestorElements, [visitor]),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildElements(_i3.ElementVisitor? visitor) => super.noSuchMethod(
    Invocation.method(#visitChildElements, [visitor]),
    returnValueForMissingStub: null,
  );

  @override
  void dispatchNotification(_i7.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(#dispatchNotification, [notification]),
        returnValueForMissingStub: null,
      );

  @override
  _i4.DiagnosticsNode describeElement(
    String? name, {
    _i4.DiagnosticsTreeStyle? style = _i4.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#describeElement, [name], {#style: style}),
            returnValue: _FakeDiagnosticsNode_3(
              this,
              Invocation.method(#describeElement, [name], {#style: style}),
            ),
          )
          as _i4.DiagnosticsNode);

  @override
  _i4.DiagnosticsNode describeWidget(
    String? name, {
    _i4.DiagnosticsTreeStyle? style = _i4.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#describeWidget, [name], {#style: style}),
            returnValue: _FakeDiagnosticsNode_3(
              this,
              Invocation.method(#describeWidget, [name], {#style: style}),
            ),
          )
          as _i4.DiagnosticsNode);

  @override
  List<_i4.DiagnosticsNode> describeMissingAncestor({
    required Type? expectedAncestorType,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#describeMissingAncestor, [], {
              #expectedAncestorType: expectedAncestorType,
            }),
            returnValue: <_i4.DiagnosticsNode>[],
          )
          as List<_i4.DiagnosticsNode>);

  @override
  _i4.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#describeOwnershipChain, [name]),
            returnValue: _FakeDiagnosticsNode_3(
              this,
              Invocation.method(#describeOwnershipChain, [name]),
            ),
          )
          as _i4.DiagnosticsNode);
}

/// A class which mocks [TodoProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoProvider extends _i1.Mock implements _i8.TodoProvider {
  MockTodoProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.Todo> get todos =>
      (super.noSuchMethod(Invocation.getter(#todos), returnValue: <_i2.Todo>[])
          as List<_i2.Todo>);

  @override
  set todos(List<_i2.Todo>? value) => super.noSuchMethod(
    Invocation.setter(#todos, value),
    returnValueForMissingStub: null,
  );

  @override
  List<_i2.Todo> get completedTodos =>
      (super.noSuchMethod(
            Invocation.getter(#completedTodos),
            returnValue: <_i2.Todo>[],
          )
          as List<_i2.Todo>);

  @override
  List<_i2.Todo> get incompleteTodos =>
      (super.noSuchMethod(
            Invocation.getter(#incompleteTodos),
            returnValue: <_i2.Todo>[],
          )
          as List<_i2.Todo>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i6.Future<void> fetchTodos() =>
      (super.noSuchMethod(
            Invocation.method(#fetchTodos, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i2.Todo? findTodoById(int? id) =>
      (super.noSuchMethod(Invocation.method(#findTodoById, [id])) as _i2.Todo?);

  @override
  _i6.Future<_i2.Todo?> getTodoById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getTodoById, [id]),
            returnValue: _i6.Future<_i2.Todo?>.value(),
          )
          as _i6.Future<_i2.Todo?>);

  @override
  _i6.Future<void> addTodo(String? title) =>
      (super.noSuchMethod(
            Invocation.method(#addTodo, [title]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> updateTodo(_i2.Todo? todo) =>
      (super.noSuchMethod(
            Invocation.method(#updateTodo, [todo]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> toggleTodoCompletion(_i2.Todo? todo) =>
      (super.noSuchMethod(
            Invocation.method(#toggleTodoCompletion, [todo]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> deleteTodo(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTodo, [id]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
