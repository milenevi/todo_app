// Mocks generated by Mockito 5.4.5 from annotations
// in todo_app/test/presentation/controllers/todo_detail_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:ui' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_app/domain/entities/todo_entity.dart' as _i4;
import 'package:todo_app/domain/usecases/todo_usecases.dart' as _i2;
import 'package:todo_app/presentation/providers/todo_provider.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TodoUseCases].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoUseCases extends _i1.Mock implements _i2.TodoUseCases {
  MockTodoUseCases() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.TodoEntity>> getTodos() =>
      (super.noSuchMethod(
            Invocation.method(#getTodos, []),
            returnValue: _i3.Future<List<_i4.TodoEntity>>.value(
              <_i4.TodoEntity>[],
            ),
          )
          as _i3.Future<List<_i4.TodoEntity>>);

  @override
  _i3.Future<_i4.TodoEntity?> getTodoById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getTodoById, [id]),
            returnValue: _i3.Future<_i4.TodoEntity?>.value(),
          )
          as _i3.Future<_i4.TodoEntity?>);

  @override
  _i3.Future<_i4.TodoEntity?> toggleTodoCompletion(_i4.TodoEntity? todo) =>
      (super.noSuchMethod(
            Invocation.method(#toggleTodoCompletion, [todo]),
            returnValue: _i3.Future<_i4.TodoEntity?>.value(),
          )
          as _i3.Future<_i4.TodoEntity?>);

  @override
  _i3.Future<_i4.TodoEntity?> createTodo(String? title) =>
      (super.noSuchMethod(
            Invocation.method(#createTodo, [title]),
            returnValue: _i3.Future<_i4.TodoEntity?>.value(),
          )
          as _i3.Future<_i4.TodoEntity?>);

  @override
  _i3.Future<bool> deleteTodo(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTodo, [id]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<_i4.TodoEntity?> updateTodo(_i4.TodoEntity? todo) =>
      (super.noSuchMethod(
            Invocation.method(#updateTodo, [todo]),
            returnValue: _i3.Future<_i4.TodoEntity?>.value(),
          )
          as _i3.Future<_i4.TodoEntity?>);

  @override
  List<_i4.TodoEntity> getLocalTodos() =>
      (super.noSuchMethod(
            Invocation.method(#getLocalTodos, []),
            returnValue: <_i4.TodoEntity>[],
          )
          as List<_i4.TodoEntity>);
}

/// A class which mocks [TodoProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoProvider extends _i1.Mock implements _i5.TodoProvider {
  MockTodoProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i4.TodoEntity> get todos =>
      (super.noSuchMethod(
            Invocation.getter(#todos),
            returnValue: <_i4.TodoEntity>[],
          )
          as List<_i4.TodoEntity>);

  @override
  set todos(List<_i4.TodoEntity>? value) => super.noSuchMethod(
    Invocation.setter(#todos, value),
    returnValueForMissingStub: null,
  );

  @override
  List<_i4.TodoEntity> get completedTodos =>
      (super.noSuchMethod(
            Invocation.getter(#completedTodos),
            returnValue: <_i4.TodoEntity>[],
          )
          as List<_i4.TodoEntity>);

  @override
  List<_i4.TodoEntity> get incompleteTodos =>
      (super.noSuchMethod(
            Invocation.getter(#incompleteTodos),
            returnValue: <_i4.TodoEntity>[],
          )
          as List<_i4.TodoEntity>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get initialized =>
      (super.noSuchMethod(Invocation.getter(#initialized), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i3.Future<void> fetchTodos() =>
      (super.noSuchMethod(
            Invocation.method(#fetchTodos, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i4.TodoEntity? findTodoById(int? id) =>
      (super.noSuchMethod(Invocation.method(#findTodoById, [id]))
          as _i4.TodoEntity?);

  @override
  _i3.Future<_i4.TodoEntity?> getTodoById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getTodoById, [id]),
            returnValue: _i3.Future<_i4.TodoEntity?>.value(),
          )
          as _i3.Future<_i4.TodoEntity?>);

  @override
  _i3.Future<void> addTodo(String? title) =>
      (super.noSuchMethod(
            Invocation.method(#addTodo, [title]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> toggleTodoCompletion(_i4.TodoEntity? todo) =>
      (super.noSuchMethod(
            Invocation.method(#toggleTodoCompletion, [todo]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> updateTodo(_i4.TodoEntity? todo) =>
      (super.noSuchMethod(
            Invocation.method(#updateTodo, [todo]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteTodo(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTodo, [id]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
